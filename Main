<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>BikeToolz.info - Cycling Climb Calculator & Route Planner</title>
    <style>
        :root {
            --primary-color: #2563eb;
            --secondary-color: #1e40af;
            --accent-color: #3b82f6;
            --text-color: #1f2937;
            --bg-color: #ffffff;
            --card-bg: #f8fafc;
            --border-color: #e5e7eb;
            --ad-bg: #f3f4f6;
            --success-color: #10b981;
            --warning-color: #f59e0b;
            --danger-color: #ef4444;
        }

        [data-theme="dark"] {
            --primary-color: #3b82f6;
            --secondary-color: #2563eb;
            --accent-color: #60a5fa;
            --text-color: #f9fafb;
            --bg-color: #111827;
            --card-bg: #1f2937;
            --border-color: #374151;
            --ad-bg: #374151;
            --success-color: #34d399;
            --warning-color: #fbbf24;
            --danger-color: #f87171;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: var(--bg-color);
            color: var(--text-color);
            line-height: 1.6;
            transition: all 0.3s ease;
        }

        .header-banner {
            background: 
                linear-gradient(135deg, rgba(37, 99, 235, 0.3) 0%, rgba(30, 64, 175, 0.5) 100%),
                url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1200 400"><defs><linearGradient id="sky" x1="0%" y1="0%" x2="0%" y2="100%"><stop offset="0%" style="stop-color:%2387CEEB;stop-opacity:1" /><stop offset="70%" style="stop-color:%23B0E0E6;stop-opacity:1" /><stop offset="100%" style="stop-color:%23E0F6FF;stop-opacity:1" /></linearGradient><radialGradient id="cloud1" cx="50%" cy="50%" r="50%"><stop offset="0%" style="stop-color:%23ffffff;stop-opacity:0.9" /><stop offset="100%" style="stop-color:%23ffffff;stop-opacity:0.3" /></radialGradient><radialGradient id="cloud2" cx="50%" cy="50%" r="40%"><stop offset="0%" style="stop-color:%23ffffff;stop-opacity:0.8" /><stop offset="100%" style="stop-color:%23ffffff;stop-opacity:0.2" /></radialGradient></defs><rect width="1200" height="400" fill="url(%23sky)"/><ellipse cx="200" cy="60" rx="80" ry="25" fill="url(%23cloud1)"/><ellipse cx="240" cy="50" rx="60" ry="20" fill="url(%23cloud1)"/><ellipse cx="600" cy="80" rx="90" ry="30" fill="url(%23cloud2)"/><ellipse cx="650" cy="70" rx="70" ry="25" fill="url(%23cloud2)"/><ellipse cx="950" cy="55" rx="85" ry="28" fill="url(%23cloud1)"/><path d="M0,200 L150,120 L300,140 L450,90 L600,110 L750,70 L900,90 L1050,50 L1200,70 L1200,400 L0,400 Z" fill="%23065f46" opacity="0.95"/><path d="M0,240 L120,160 L240,180 L360,130 L480,150 L600,110 L720,130 L840,90 L960,110 L1080,80 L1200,100 L1200,400 L0,400 Z" fill="%23166534" opacity="0.9"/><path d="M0,280 L100,220 L200,240 L300,200 L400,220 L500,180 L600,200 L700,160 L800,180 L900,140 L1000,160 L1100,130 L1200,150 L1200,400 L0,400 Z" fill="%23167432" opacity="0.85"/><path d="M0,320 Q200,260 400,280 T800,260 Q1000,240 1200,270 L1200,400 L0,400 Z" fill="%2322c55e" opacity="0.8"/><path d="M200,350 Q250,340 300,345 Q350,350 400,345 Q450,340 500,345 Q550,350 600,345 Q650,340 700,345" stroke="%23f3f4f6" stroke-width="14" fill="none" opacity="0.9"/><path d="M200,350 Q250,340 300,345 Q350,350 400,345 Q450,340 500,345 Q550,350 600,345 Q650,340 700,345" stroke="%23d1d5db" stroke-width="10" fill="none" opacity="0.8"/><path d="M200,350 Q250,340 300,345 Q350,350 400,345 Q450,340 500,345 Q550,350 600,345 Q650,340 700,345" stroke="%23ffffff" stroke-width="2" stroke-dasharray="8,12" fill="none" opacity="0.9"/><path d="M480,300 Q520,290 560,295 Q600,300 640,295 Q680,290 720,295 Q760,300 800,295 Q840,290 880,295" stroke="%23f3f4f6" stroke-width="12" fill="none" opacity="0.7"/><path d="M480,300 Q520,290 560,295 Q600,300 640,295 Q680,290 720,295 Q760,300 800,295 Q840,290 880,295" stroke="%23ffffff" stroke-width="1.5" stroke-dasharray="6,10" fill="none" opacity="0.8"/><circle cx="100" cy="150" r="2" fill="%2322c55e" opacity="0.6"/><circle cx="150" cy="180" r="1.5" fill="%2322c55e" opacity="0.5"/><circle cx="250" cy="200" r="2.5" fill="%2322c55e" opacity="0.7"/><circle cx="350" cy="230" r="1.8" fill="%2322c55e" opacity="0.6"/><circle cx="450" cy="260" r="2.2" fill="%2322c55e" opacity="0.5"/><path d="M50,180 L70,170 L90,175 L110,165 L130,170" fill="%23166534" opacity="0.8"/><path d="M180,200 L200,190 L220,195 L240,185 L260,190" fill="%23166534" opacity="0.7"/><path d="M320,220 L340,210 L360,215 L380,205 L400,210" fill="%23166534" opacity="0.8"/></svg>');
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;
            color: white;
            padding: 2rem 0;
            text-align: center;
            position: relative;
            min-height: 120px;
            overflow: visible;
        }

        .header-content {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 1rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            position: relative;
        }

        .hamburger-menu {
            position: relative;
        }

        .hamburger-button {
            background: rgba(255,255,255,0.2);
            border: 2px solid rgba(255,255,255,0.3);
            border-radius: 8px;
            color: white;
            padding: 0.75rem;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            width: 45px;
            height: 45px;
        }

        .hamburger-button:hover {
            background: rgba(255,255,255,0.3);
            transform: scale(1.05);
        }

        .hamburger-line {
            width: 20px;
            height: 3px;
            background: white;
            border-radius: 2px;
            transition: all 0.3s ease;
            position: absolute;
            left: 50%;
            transform: translateX(-50%);
        }

        .hamburger-line:nth-child(1) {
            top: 13px;
        }

        .hamburger-line:nth-child(2) {
            top: 20px;
        }

        .hamburger-line:nth-child(3) {
            top: 27px;
        }

        .hamburger-button.active .hamburger-line:nth-child(1) {
            top: 20px;
            transform: translateX(-50%) rotate(45deg);
        }

        .hamburger-button.active .hamburger-line:nth-child(2) {
            opacity: 0;
            transform: translateX(-50%) scale(0);
        }

        .hamburger-button.active .hamburger-line:nth-child(3) {
            top: 20px;
            transform: translateX(-50%) rotate(-45deg);
        }

        .hamburger-dropdown {
            position: absolute;
            top: 65px;
            right: 0;
            background: rgba(255,255,255,0.98);
            backdrop-filter: blur(15px);
            border-radius: 12px;
            box-shadow: 0 10px 40px rgba(0,0,0,0.4);
            padding: 1rem;
            min-width: 200px;
            opacity: 0;
            visibility: hidden;
            transform: translateY(-15px);
            transition: all 0.3s ease;
            z-index: 9999;
            border: 1px solid rgba(255,255,255,0.3);
        }

        .hamburger-dropdown.show {
            opacity: 1;
            visibility: visible;
            transform: translateY(0);
        }

        .dropdown-item {
            display: block;
            width: 100%;
            padding: 0.75rem 1rem;
            margin-bottom: 0.5rem;
            border: 2px solid var(--primary-color);
            border-radius: 8px;
            text-decoration: none;
            color: var(--primary-color);
            font-weight: 600;
            text-align: center;
            transition: all 0.3s ease;
            background: transparent;
            cursor: pointer;
            font-size: 0.9rem;
        }

        .dropdown-item:hover {
            background: var(--primary-color);
            color: white;
            transform: translateY(-2px);
        }

        .dropdown-item.primary {
            background: var(--primary-color);
            color: white;
        }

        .dropdown-item.primary:hover {
            background: var(--secondary-color);
        }

        .dropdown-item:last-child {
            margin-bottom: 0;
        }

        .theme-toggle-dropdown {
            background: rgba(55, 65, 81, 0.1);
            color: var(--text-color);
            border-color: rgba(55, 65, 81, 0.3);
        }

        .theme-toggle-dropdown:hover {
            background: rgba(55, 65, 81, 0.8);
            color: white;
        }

        .unit-system-dropdown {
            background: rgba(59, 130, 246, 0.1);
            color: var(--primary-color);
            border-color: var(--primary-color);
        }

        .unit-system-dropdown:hover {
            background: var(--primary-color);
            color: white;
        }

        .logo {
            font-size: 2.5rem;
            font-weight: bold;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }

        .theme-toggle {
            background: rgba(255,255,255,0.2);
            border: 2px solid rgba(255,255,255,0.3);
            border-radius: 25px;
            color: white;
            padding: 0.5rem 1rem;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .theme-toggle:hover {
            background: rgba(255,255,255,0.3);
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 1rem;
        }

        .ad-leaderboard {
            background: var(--ad-bg);
            border: 2px dashed var(--border-color);
            height: 90px;
            margin: 1rem 0;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #666;
            border-radius: 8px;
        }

        .main-content {
            display: grid;
            grid-template-columns: 1fr 300px;
            gap: 2rem;
            margin: 2rem 0;
        }

        .calculator-section {
            background: var(--card-bg);
            border-radius: 12px;
            padding: 2rem;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            border: 1px solid var(--border-color);
        }

        .calculator-content {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 2rem;
            align-items: start;
        }

        .inputs-column {
            display: flex;
            flex-direction: column;
        }

        .results-column {
            display: flex;
            flex-direction: column;
            position: sticky;
            top: 2rem;
        }

        .sidebar {
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        .ad-medium-rect {
            background: var(--ad-bg);
            border: 2px dashed var(--border-color);
            height: 250px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #666;
            border-radius: 8px;
        }

        .calculator-title {
            color: var(--primary-color);
            font-size: 1.8rem;
            margin-bottom: 1.5rem;
            text-align: center;
        }

        .calculation-mode {
            background: var(--bg-color);
            border: 2px solid var(--primary-color);
            border-radius: 8px;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
        }

        .calculation-mode h3 {
            color: var(--primary-color);
            margin-bottom: 1rem;
            text-align: center;
            font-size: 1.1rem;
        }

        .mode-toggle-container {
            display: flex;
            flex-direction: column;
            gap: 0.75rem;
        }

        .mode-option {
            display: flex;
            align-items: flex-start;
            gap: 0.75rem;
            padding: 0.75rem;
            border-radius: 6px;
            background: var(--card-bg);
            cursor: pointer;
            transition: background-color 0.3s ease;
            border: 2px solid transparent;
        }

        .mode-option:hover {
            background: var(--border-color);
        }

        .mode-option input[type="radio"]:checked + .mode-label {
            color: var(--primary-color);
            font-weight: 600;
        }

        .mode-option input[type="radio"] {
            margin-top: 0.2rem;
            accent-color: var(--primary-color);
        }

        .mode-label {
            line-height: 1.4;
        }

        .gear-ratio-display {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.75rem 1rem;
            background: var(--card-bg);
            border: 2px solid var(--border-color);
            border-radius: 6px;
            margin-bottom: 1rem;
            font-size: 0.95rem;
        }

        .gear-ratio-display label {
            font-weight: 600;
            color: var(--text-color);
            margin: 0;
        }

        .gear-ratio-display span {
            font-weight: bold;
            color: var(--primary-color);
            font-size: 1.1rem;
        }

        .parameter-group {
            background: var(--bg-color);
            border: 2px solid var(--primary-color);
            border-radius: 8px;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
        }

        .parameter-group h3 {
            color: var(--primary-color);
            margin-bottom: 1rem;
            text-align: center;
            font-size: 1.1rem;
        }

        .parameter-group .input-group {
            margin-bottom: 1rem;
        }

        .parameter-group .input-group:last-child {
            margin-bottom: 0;
        }

        .input-group {
            display: flex;
            align-items: center;
            gap: 1rem;
            margin-bottom: 1rem;
        }

        .input-group label {
            flex: 1;
            font-weight: 600;
            color: var(--text-color);
            margin: 0;
        }

        .input-group .multi-line-label {
            line-height: 1.3;
            font-size: 0.95rem;
        }

        .input-with-unit {
            position: relative;
            display: flex;
            align-items: center;
        }

        .input-with-unit input {
            max-width: 100px;
            padding-right: 35px; /* Make room for unit suffix */
        }

        .input-unit {
            position: absolute;
            right: 8px;
            font-weight: 600;
            color: var(--primary-color);
            font-size: 0.85rem;
            pointer-events: none;
            background: var(--bg-color);
            padding: 0 2px;
        }

        input[type="number"], select {
            padding: 0.75rem;
            border: 2px solid var(--border-color);
            border-radius: 6px;
            background: var(--bg-color);
            color: var(--text-color);
            font-size: 1rem;
            transition: border-color 0.3s ease;
            max-width: 150px;
            min-width: 100px;
        }

        input[type="number"]:focus, select:focus {
            outline: none;
            border-color: var(--primary-color);
        }

        .climb-parameters {
            background: var(--bg-color);
            border: 2px solid var(--primary-color);
            border-radius: 8px;
            padding: 1.5rem;
            margin: 1.5rem 0;
        }

        .climb-parameters h3 {
            color: var(--primary-color);
            margin-bottom: 1rem;
            text-align: center;
        }

        .parameter-item {
            display: flex;
            align-items: center;
            gap: 1rem;
            margin-bottom: 1rem;
            padding: 0.5rem;
            border-radius: 6px;
            background: var(--card-bg);
        }

        .parameter-item:last-child {
            margin-bottom: 0;
        }

        .parameter-checkbox {
            width: 20px;
            height: 20px;
            accent-color: var(--primary-color);
            flex-shrink: 0;
        }

        .parameter-item label {
            flex: 1;
            font-weight: 600;
        }

        .parameter-item input[type="number"] {
            max-width: 100px;
        }

        .results-section {
            background: var(--primary-color);
            color: white;
            padding: 1.5rem;
            border-radius: 8px;
            opacity: 0;
            transform: translateY(-10px);
            transition: all 0.3s ease;
        }

        .results-section.show {
            opacity: 1;
            transform: translateY(0);
        }

        .result-item {
            display: flex;
            justify-content: space-between;
            margin-bottom: 0.5rem;
            padding: 0.5rem;
            background: rgba(255,255,255,0.1);
            border-radius: 4px;
            transition: background-color 0.3s ease;
        }

        .result-item.updated {
            background: rgba(255,255,255,0.2);
            animation: highlight 0.6s ease;
        }

        .result-item.power-surplus {
            background: rgba(16, 185, 129, 0.3);
        }

        .result-item.power-deficit {
            background: rgba(239, 68, 68, 0.3);
        }

        .result-item.calculated-parameter {
            background: rgba(255,255,255,0.2);
            font-weight: bold;
            font-size: 1.05rem;
            text-align: center;
            justify-content: center;
            margin-bottom: 1rem;
        }

        .results-divider {
            margin: 1rem 0;
            border: none;
            border-top: 1px solid rgba(255,255,255,0.3);
        }

        .power-section-title {
            font-weight: bold;
            font-size: 1.1rem;
            margin-bottom: 0.5rem;
            text-align: center;
        }

        .power-bar-container {
            width: 100%;
            height: 24px;
            background: rgba(255,255,255,0.2);
            border-radius: 12px;
            margin: 0.75rem 0;
            position: relative;
            overflow: hidden;
            border: 1px solid rgba(255,255,255,0.3);
        }

        .power-bar {
            height: 100%;
            border-radius: 12px;
            transition: all 0.5s ease;
            position: relative;
        }

        .power-bar.sufficient {
            background: linear-gradient(90deg, var(--success-color), #34d399);
        }

        .power-bar.insufficient {
            background: linear-gradient(90deg, var(--danger-color), #f87171);
        }

        .power-bar-label {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 0.8rem;
            font-weight: bold;
            color: white;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.7);
            pointer-events: none;
        }

        .power-explanation {
            margin-top: 1rem;
            padding: 0.75rem;
            background: rgba(255,255,255,0.1);
            border-radius: 6px;
            font-size: 0.9rem;
            line-height: 1.4;
        }

        .power-breakdown {
            margin-left: 1rem;
            font-size: 0.9rem;
        }

        @keyframes highlight {
            0% { background: rgba(255,255,255,0.3); }
            100% { background: rgba(255,255,255,0.1); }
        }

        .calculating {
            opacity: 0.7;
            font-style: italic;
        }

        .ad-results {
            background: var(--ad-bg);
            border: 2px dashed var(--border-color);
            height: 100px;
            margin: 1rem 0;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #666;
            border-radius: 8px;
        }

        .route-planning {
            margin: 3rem 0;
        }

        .section-title {
            color: var(--primary-color);
            font-size: 1.5rem;
            margin-bottom: 1rem;
            text-align: center;
        }

        .route-instructions {
            text-align: center;
            margin-bottom: 1.5rem;
            color: var(--text-color);
            background: var(--card-bg);
            padding: 1rem;
            border-radius: 8px;
            border-left: 4px solid var(--primary-color);
        }

        .map-container {
            border: 2px solid var(--border-color);
            border-radius: 8px;
            overflow: hidden;
            height: 500px;
            position: relative;
            background: var(--card-bg);
        }

        .map-container iframe {
            width: 100%;
            height: 100%;
            border: none;
        }

        .info-buttons-section {
            margin: 2rem 0;
            background: var(--card-bg);
            border-radius: 12px;
            padding: 1.5rem;
            border: 1px solid var(--border-color);
        }

        .info-buttons-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-bottom: 1rem;
        }

        .info-button {
            background: var(--bg-color);
            border: 2px solid var(--primary-color);
            border-radius: 8px;
            padding: 0.75rem 1rem;
            color: var(--primary-color);
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            justify-content: space-between;
            align-items: center;
            text-align: left;
        }

        .info-button:hover {
            background: var(--primary-color);
            color: white;
            transform: translateY(-2px);
        }

        .info-button.active {
            background: var(--primary-color);
            color: white;
        }

        .dropdown-arrow {
            transition: transform 0.3s ease;
            font-size: 0.8rem;
        }

        .dropdown-arrow.rotated {
            transform: rotate(180deg);
        }

        .info-dropdown {
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.3s ease;
            background: var(--bg-color);
            border-radius: 8px;
            margin-top: 1rem;
        }

        .info-dropdown.show {
            max-height: 500px;
            border: 1px solid var(--border-color);
        }

        .info-content {
            padding: 1.5rem;
        }

        .info-content h3 {
            color: var(--primary-color);
            margin-bottom: 1rem;
            font-size: 1.1rem;
        }

        .info-content p {
            line-height: 1.6;
            color: var(--text-color);
        }

        .footer {
            background: var(--card-bg);
            border-top: 1px solid var(--border-color);
            padding: 2rem 0;
            margin-top: 3rem;
            text-align: center;
        }

        .disabled {
            opacity: 0.6;
            pointer-events: none;
        }

        .error-message {
            color: #dc2626;
            font-size: 0.875rem;
            margin-top: 0.5rem;
            display: none;
            position: absolute;
            bottom: -1.5rem;
            left: 0;
            width: 100%;
        }

        .input-group {
            position: relative;
            padding-bottom: 1.5rem;
        }

        .input-group.error input {
            border-color: #dc2626;
        }

        .input-group.error .error-message {
            display: block;
        }

        @media (max-width: 768px) {
            .main-content {
                grid-template-columns: 1fr;
            }

            .sidebar {
                order: -1;
            }

            .ad-medium-rect {
                display: none;
            }

            .calculator-content {
                grid-template-columns: 1fr;
                gap: 1.5rem;
            }

            .results-column {
                position: static;
            }

            .header-content {
                gap: 1rem;
            }

            .logo {
                font-size: 2rem;
            }

            .hamburger-dropdown {
                right: -1rem;
                min-width: 180px;
            }

            .dropdown-item {
                padding: 0.75rem;
                font-size: 0.85rem;
            }

            .info-buttons-container {
                grid-template-columns: 1fr;
                gap: 0.75rem;
            }

            .info-button {
                padding: 0.75rem;
                font-size: 0.9rem;
            }

            .info-content {
                padding: 1rem;
            }

            .input-group {
                flex-direction: column;
                align-items: stretch;
            }

            .input-group label {
                margin-bottom: 0.5rem;
            }

            .power-breakdown {
                margin-left: 0.5rem;
            }

            .mode-toggle-container {
                gap: 0.5rem;
            }

            .mode-option {
                padding: 0.5rem;
            }
        }

        @media (max-width: 480px) {
            .container {
                padding: 0 0.5rem;
            }

            .calculator-section {
                padding: 1rem;
            }

            .logo {
                font-size: 1.5rem;
            }
        }
    </style>
</head>
<body>
    <header class="header-banner">
        <div class="header-content">
            <h1 class="logo">BikeToolz.info</h1>
            
            <!-- Hamburger Menu -->
            <div class="hamburger-menu">
                <button class="hamburger-button" onclick="toggleHamburgerMenu()" id="hamburgerBtn">
                    <div class="hamburger-line"></div>
                    <div class="hamburger-line"></div>
                    <div class="hamburger-line"></div>
                </button>
                
                <div class="hamburger-dropdown" id="hamburgerDropdown">
                    <a href="#" class="dropdown-item">Login</a>
                    <a href="#" class="dropdown-item primary">Plans</a>
                    <a href="#" class="dropdown-item">Donate</a>
                    <button class="dropdown-item theme-toggle-dropdown" onclick="toggleTheme()">
                        <span id="themeToggleText">🌙 Dark Mode</span>
                    </button>
                    <button class="dropdown-item unit-system-dropdown" onclick="toggleUnitSystem()">
                        <span id="unitSystemText">⚙️ Units: Metric</span>
                    </button>
                </div>
            </div>
        </div>
    </header>

    <div class="container">
        <!-- Leaderboard Ad -->
        <div class="ad-leaderboard">Advertisement (728x90)</div>

        <!-- Information Buttons Section -->
        <div class="info-buttons-section">
            <div class="info-buttons-container">
                <button class="info-button" onclick="toggleInfoDropdown('howToUse')">
                    <span>How to Use</span>
                    <span class="dropdown-arrow" id="howToUseArrow">▼</span>
                </button>
                <button class="info-button" onclick="toggleInfoDropdown('powerAnalysis')">
                    <span>Understanding Power Analysis</span>
                    <span class="dropdown-arrow" id="powerAnalysisArrow">▼</span>
                </button>
                <button class="info-button" onclick="toggleInfoDropdown('climbTips')">
                    <span>Tips for Climb Planning</span>
                    <span class="dropdown-arrow" id="climbTipsArrow">▼</span>
                </button>
                <button class="info-button" onclick="toggleInfoDropdown('faq')">
                    <span>FAQ</span>
                    <span class="dropdown-arrow" id="faqArrow">▼</span>
                </button>
            </div>

            <!-- Dropdown Content -->
            <div class="info-dropdown" id="howToUseDropdown">
                <div class="info-content">
                    <h3>How to Use</h3>
                    <p>1. Enter your power output and system weight<br>
                    2. Select your wheel size<br>
                    3. Set your bike's chainring and cog teeth<br>
                    4. Choose your preferred cadence<br>
                    5. Select 2 of the 3 climb parameters<br>
                    6. Results update automatically!</p>
                </div>
            </div>

            <div class="info-dropdown" id="powerAnalysisDropdown">
                <div class="info-content">
                    <h3>Understanding Power Analysis</h3>
                    <p>• <strong>Available Power:</strong> Your output minus mechanical losses<br>
                    • <strong>Gravity Power:</strong> Energy to lift weight against gravity<br>
                    • <strong>Rolling Resistance:</strong> Energy lost to tire friction<br>
                    • <strong>Wind Resistance:</strong> Energy to push through air<br>
                    • A power surplus means sustainable pace; deficit means you'll slow down</p>
                </div>
            </div>

            <div class="info-dropdown" id="climbTipsDropdown">
                <div class="info-content">
                    <h3>Tips for Climb Planning</h3>
                    <p>• Start with conservative power estimates<br>
                    • Consider your lowest comfortable gear<br>
                    • Check your actual wheel circumference<br>
                    • Plan rest stops for long climbs<br>
                    • Bring extra nutrition and water</p>
                </div>
            </div>

            <div class="info-dropdown" id="faqDropdown">
                <div class="info-content">
                    <h3>FAQ</h3>
                    <p><strong>Q: How accurate are the calculations?</strong><br>
                    A: Results are estimates based on physics models. Real-world conditions may vary.<br><br>
                    <strong>Q: Why does wheel size matter?</strong><br>
                    A: Different wheel sizes affect your actual speed for the same gear ratio and cadence.</p>
                </div>
            </div>
        </div>

        <div class="main-content">
            <main class="calculator-section">
                <h2 class="calculator-title">Cycling Climb Calculator</h2>
                
                <div class="calculator-content">
                    <!-- Left Column: Inputs -->
                    <div class="inputs-column">
                        <!-- Calculation Mode Toggle -->
                        <div class="calculation-mode">
                            <h3>Calculation Mode</h3>
                            <div class="mode-toggle-container">
                                <label class="mode-option">
                                    <input type="radio" name="calcMode" value="gear-first" checked onchange="handleModeChange()">
                                    <span class="mode-label">
                                        <strong>Gear-First:</strong> Check if my preferred cadence/gearing works
                                    </span>
                                </label>
                                <label class="mode-option">
                                    <input type="radio" name="calcMode" value="power-first" onchange="handleModeChange()">
                                    <span class="mode-label">
                                        <strong>Power-First:</strong> Find optimal cadence for my power output
                                    </span>
                                </label>
                            </div>
                        </div>
                        
                        <!-- Rider Parameters -->
                        <div class="parameter-group">
                            <h3>Rider Parameters</h3>
                            
                            <div class="input-group">
                                <label for="power">Power (watts):</label>
                                <input type="number" id="power" value="250" min="50" max="1000">
                                <div class="error-message">Power must be between 50-1000 watts</div>
                            </div>

                            <div class="input-group" id="cadenceInputGroup">
                                <label for="cadence">Cadence (RPM):</label>
                                <input type="number" id="cadence" value="80" min="40" max="120">
                                <div class="error-message">Cadence must be between 40-120 RPM</div>
                            </div>

                            <div class="input-group">
                                <label for="riderWeight">Rider Weight:</label>
                                <div class="input-with-unit">
                                    <input type="number" id="riderWeight" value="70" min="30" max="150">
                                    <span class="input-unit" id="riderWeightUnit">kg</span>
                                </div>
                                <div class="error-message" id="riderWeightError">Rider weight must be between 30-150 kg</div>
                            </div>
                        </div>

                        <!-- Equipment Parameters -->
                        <div class="parameter-group">
                            <h3>Equipment Parameters</h3>
                            
                            <div class="input-group">
                                <label for="equipmentWeight" class="multi-line-label">Equipment Weight<br>(bike + gear):</label>
                                <div class="input-with-unit">
                                    <input type="number" id="equipmentWeight" value="10" min="5" max="30">
                                    <span class="input-unit" id="equipmentWeightUnit">kg</span>
                                </div>
                                <div class="error-message" id="equipmentWeightError">Equipment weight must be between 5-30 kg</div>
                            </div>

                            <div class="input-group">
                                <label for="wheelSize">Wheel Size:</label>
                                <select id="wheelSize" onchange="updateWheelCircumference()">
                                    <option value="2.1">700c Road (2.1m)</option>
                                    <option value="2.0">26" MTB (2.0m)</option>
                                    <option value="2.15">27.5" MTB (2.15m)</option>
                                    <option value="2.3">29" MTB (2.3m)</option>
                                    <option value="custom">Custom</option>
                                </select>
                                <div class="error-message"></div>
                            </div>

                            <div class="input-group" id="customWheelGroup" style="display: none;">
                                <label for="wheelCircumference" class="multi-line-label">Wheel<br>Circumference:</label>
                                <div class="input-with-unit">
                                    <input type="number" id="wheelCircumference" value="2.1" min="1.5" max="3.0" step="0.01">
                                    <span class="input-unit" id="circumferenceUnit">m</span>
                                </div>
                                <div class="error-message" id="circumferenceError">Circumference must be between 1.5-3.0 meters</div>
                            </div>

                            <div class="input-group">
                                <label for="chainring" class="multi-line-label">Chainring Teeth<br>(front gear):</label>
                                <input type="number" id="chainring" value="50" min="20" max="60">
                                <div class="error-message">Chainring must be between 20-60 teeth</div>
                            </div>

                            <div class="input-group">
                                <label for="cog" class="multi-line-label">Cog Teeth<br>(rear gear):</label>
                                <input type="number" id="cog" value="28" min="8" max="50">
                                <div class="error-message">Cog must be between 8-50 teeth</div>
                            </div>

                            <div class="gear-ratio-display">
                                <label>Gear Ratio:</label>
                                <span id="gearRatioDisplay">1.79</span>
                            </div>
                        </div>

                        <!-- Climb Parameters -->
                        <div class="climb-parameters">
                            <h3>Climb Parameters (Select exactly 2 of 3)</h3>
                            
                            <div class="parameter-item">
                                <input type="checkbox" id="distanceCheck" class="parameter-checkbox" checked onchange="handleParameterChange('distance')">
                                <label for="distance">Distance (<span id="distanceUnit">km</span>):</label>
                                <input type="number" id="distance" value="10" min="0.1" max="100" step="0.1">
                            </div>

                            <div class="parameter-item">
                                <input type="checkbox" id="elevationCheck" class="parameter-checkbox" checked onchange="handleParameterChange('elevation')">
                                <label for="elevation">Elevation Gain (<span id="elevationUnit">m</span>):</label>
                                <input type="number" id="elevation" value="800" min="10" max="5000">
                            </div>

                            <div class="parameter-item">
                                <input type="checkbox" id="gradeCheck" class="parameter-checkbox" onchange="handleParameterChange('grade')">
                                <label for="grade">Average Grade (%):</label>
                                <input type="number" id="grade" value="8" min="0.1" max="30" step="0.1" class="disabled">
                            </div>
                        </div>
                    </div>

                    <!-- Right Column: Results -->
                    <div class="results-column">
                        <!-- Results Section -->
                        <div class="results-section" id="results">
                            <h3>Results:</h3>
                            <div class="result-item calculated-parameter">
                                <span id="calculatedParam">-</span>
                            </div>
                            <div class="result-item">
                                <span>Climbing Velocity:</span>
                                <span id="velocity">-</span>
                            </div>
                            <div class="result-item" id="cadenceResult">
                                <span id="cadenceLabel">Cadence:</span>
                                <span id="cadenceValue">-</span>
                            </div>
                            <div class="result-item">
                                <span>Total Climb Time:</span>
                                <span id="climbTime">-</span>
                            </div>
                            <div class="result-item">
                                <span>System Weight:</span>
                                <span id="systemWeight">-</span>
                            </div>

                            <!-- Power Analysis Section -->
                            <hr class="results-divider">
                            <div class="power-section-title">Power Analysis</div>
                            
                            <div class="power-bar-container">
                                <div class="power-bar" id="powerBar"></div>
                                <div class="power-bar-label" id="powerBarLabel">Power Usage</div>
                            </div>

                            <div class="result-item">
                                <span>Available Power:</span>
                                <span id="availablePower">-</span>
                            </div>
                            <div class="result-item">
                                <span>Required Power:</span>
                                <span id="requiredPower">-</span>
                            </div>
                            <div class="result-item" id="powerBalance">
                                <span>Power Balance:</span>
                                <span id="powerBalanceValue">-</span>
                            </div>

                            <div class="power-breakdown">
                                <div class="result-item">
                                    <span>├ Gravity:</span>
                                    <span id="gravityPower">-</span>
                                </div>
                                <div class="result-item">
                                    <span>├ Rolling:</span>
                                    <span id="rollingPower">-</span>
                                </div>
                                <div class="result-item">
                                    <span>└ Wind:</span>
                                    <span id="aeroPower">-</span>
                                </div>
                            </div>

                            <div class="power-explanation">
                                ℹ️ <strong>Power Analysis:</strong> Available power is your output (<span id="explanationPower">250W</span>) minus drivetrain losses (5%). Required power is what's needed to overcome gravity, rolling resistance, and wind resistance at your current speed. A surplus means you can maintain this pace; a deficit means you'll need to slow down.
                            </div>
                        </div>

                        <!-- Results Ad -->
                        <div class="ad-results">Advertisement (After Results)</div>
                    </div>
                </div>
            </main>

            <aside class="sidebar">
                <!-- Medium Rectangle Ad (Desktop Only) -->
                <div class="ad-medium-rect">Advertisement (300x250)</div>
            </aside>
        </div>

        <!-- Route Planning Section -->
        <section class="route-planning">
            <h2 class="section-title">Plan Your Route</h2>
            <div class="route-instructions">
                Use the map below to plan your climb route and gather distance, elevation gain, and/or grade information for the calculator above
            </div>
            <div class="map-container">
                <!-- Try OpenRouteService which has better embedding support -->
                <iframe 
                    src="https://maps.openrouteservice.org/directions" 
                    title="Route Planning Map"
                    style="width: 100%; height: 100%; border: none;"
                    allow="geolocation"
                ></iframe>
            </div>
            <div style="margin-top: 1rem; text-align: center;">
                <p style="color: var(--text-color); font-size: 0.9rem;">
                    If the map doesn't load, try these alternatives:
                    <a href="https://brouter.de/brouter-web/" target="_blank" style="color: var(--primary-color); font-weight: 600;">BRouter</a> |
                    <a href="https://www.komoot.com/plan" target="_blank" style="color: var(--primary-color); font-weight: 600;">Komoot</a> |
                    <a href="https://cycle.travel/map" target="_blank" style="color: var(--primary-color); font-weight: 600;">Cycle.travel</a>
                </p>
            </div>
        </section>

        <!-- FAQ Ad -->
        <div class="ad-results">Advertisement (After FAQ)</div>
    </div>

    <footer class="footer">
        <div class="container">
            <p>&copy; 2025 BikeToolz.info - Professional cycling climb calculator and route planner</p>
        </div>
    </footer>

    <script>
        // Simple test to ensure JavaScript loads
        console.log('JavaScript is loading...');
        
        // Track selected parameters and calculation timeout
        let selectedParams = ['distance', 'elevation'];
        let calculateTimeout;
        let calculationMode = 'gear-first'; // Track current calculation mode
        let isMetric = true; // Track current unit system

        // Unit conversion functions
        const conversions = {
            kgToLbs: (kg) => kg * 2.20462,
            lbsToKg: (lbs) => lbs / 2.20462,
            kmToMiles: (km) => km / 1.60934,
            milesToKm: (miles) => miles * 1.60934,
            metersToFeet: (m) => m * 3.28084,
            feetToMeters: (ft) => ft / 3.28084
        };

        // Unit system toggle
        function toggleUnitSystem() {
            console.log('=== TOGGLE UNIT SYSTEM CALLED ===');
            console.log('isMetric BEFORE toggle:', isMetric);
            
            const unitSystemText = document.getElementById('unitSystemText');
            const distanceInput = document.getElementById('distance');
            const elevationInput = document.getElementById('elevation');
            const riderWeightInput = document.getElementById('riderWeight');
            const equipmentWeightInput = document.getElementById('equipmentWeight');
            const wheelCircumferenceInput = document.getElementById('wheelCircumference');
            const wheelSizeSelect = document.getElementById('wheelSize');
            
            // Unit display elements
            const distanceUnit = document.getElementById('distanceUnit');
            const elevationUnit = document.getElementById('elevationUnit');
            const riderWeightUnit = document.getElementById('riderWeightUnit');
            const equipmentWeightUnit = document.getElementById('equipmentWeightUnit');
            const circumferenceUnit = document.getElementById('circumferenceUnit');
            const riderWeightError = document.getElementById('riderWeightError');
            const equipmentWeightError = document.getElementById('equipmentWeightError');
            const circumferenceError = document.getElementById('circumferenceError');
            
            if (isMetric) {
                // Convert to Imperial
                isMetric = false;
                unitSystemText.textContent = '⚙️ Units: Imperial';
                console.log('Switched to Imperial mode');
                
                // Convert input values
                const currentDistance = parseFloat(distanceInput.value) || 0;
                const currentElevation = parseFloat(elevationInput.value) || 0;
                const currentRiderWeight = parseFloat(riderWeightInput.value) || 0;
                const currentEquipmentWeight = parseFloat(equipmentWeightInput.value) || 0;
                const currentCircumference = parseFloat(wheelCircumferenceInput.value) || 0;
                
                distanceInput.value = (conversions.kmToMiles(currentDistance)).toFixed(1);
                elevationInput.value = Math.round(conversions.metersToFeet(currentElevation));
                riderWeightInput.value = Math.round(conversions.kgToLbs(currentRiderWeight));
                equipmentWeightInput.value = Math.round(conversions.kgToLbs(currentEquipmentWeight));
                wheelCircumferenceInput.value = (conversions.metersToFeet(currentCircumference)).toFixed(2);
                
                // Update unit displays
                if (distanceUnit) distanceUnit.textContent = 'mi';
                if (elevationUnit) elevationUnit.textContent = 'ft';
                if (riderWeightUnit) riderWeightUnit.textContent = 'lbs';
                if (equipmentWeightUnit) equipmentWeightUnit.textContent = 'lbs';
                if (circumferenceUnit) circumferenceUnit.textContent = 'ft';
                
                // Update wheel size options
                updateWheelSizeOptions(false);
                
                // Update validation ranges for imperial
                distanceInput.min = 0.1;
                distanceInput.max = 62; // ~100km in miles
                elevationInput.min = 30; // ~10m in feet
                elevationInput.max = 16400; // ~5000m in feet
                riderWeightInput.min = 66; // ~30kg in lbs
                riderWeightInput.max = 330; // ~150kg in lbs
                equipmentWeightInput.min = 11; // ~5kg in lbs
                equipmentWeightInput.max = 66; // ~30kg in lbs
                wheelCircumferenceInput.min = 4.9; // ~1.5m in feet
                wheelCircumferenceInput.max = 9.8; // ~3.0m in feet
                
                // Update error messages
                if (riderWeightError) riderWeightError.textContent = 'Rider weight must be between 66-330 lbs';
                if (equipmentWeightError) equipmentWeightError.textContent = 'Equipment weight must be between 11-66 lbs';
                if (circumferenceError) {
                    circumferenceError.textContent = 'Circumference must be between 4.9-9.8 feet';
                    console.log('Updated circumference error to imperial');
                }
                
            } else {
                // Convert to Metric
                isMetric = true;
                unitSystemText.textContent = '⚙️ Units: Metric';
                console.log('Switched to Metric mode');
                
                // Convert input values
                const currentDistance = parseFloat(distanceInput.value) || 0;
                const currentElevation = parseFloat(elevationInput.value) || 0;
                const currentRiderWeight = parseFloat(riderWeightInput.value) || 0;
                const currentEquipmentWeight = parseFloat(equipmentWeightInput.value) || 0;
                const currentCircumference = parseFloat(wheelCircumferenceInput.value) || 0;
                
                distanceInput.value = (conversions.milesToKm(currentDistance)).toFixed(1);
                elevationInput.value = Math.round(conversions.feetToMeters(currentElevation));
                riderWeightInput.value = Math.round(conversions.lbsToKg(currentRiderWeight));
                equipmentWeightInput.value = Math.round(conversions.lbsToKg(currentEquipmentWeight));
                wheelCircumferenceInput.value = (conversions.feetToMeters(currentCircumference)).toFixed(2);
                
                // Update unit displays
                if (distanceUnit) distanceUnit.textContent = 'km';
                if (elevationUnit) elevationUnit.textContent = 'm';
                if (riderWeightUnit) riderWeightUnit.textContent = 'kg';
                if (equipmentWeightUnit) equipmentWeightUnit.textContent = 'kg';
                if (circumferenceUnit) circumferenceUnit.textContent = 'm';
                
                // Update wheel size options
                updateWheelSizeOptions(true);
                
                // Update validation ranges for metric
                distanceInput.min = 0.1;
                distanceInput.max = 100;
                elevationInput.min = 10;
                elevationInput.max = 5000;
                riderWeightInput.min = 30;
                riderWeightInput.max = 150;
                equipmentWeightInput.min = 5;
                equipmentWeightInput.max = 30;
                wheelCircumferenceInput.min = 1.5;
                wheelCircumferenceInput.max = 3.0;
                
                // Update error messages
                if (riderWeightError) riderWeightError.textContent = 'Rider weight must be between 30-150 kg';
                if (equipmentWeightError) equipmentWeightError.textContent = 'Equipment weight must be between 5-30 kg';
                if (circumferenceError) circumferenceError.textContent = 'Circumference must be between 1.5-3.0 meters';
            }
            
            console.log('Unit toggle completed, isMetric now:', isMetric);
            debouncedCalculate();
        }

        // Update wheel size options based on unit system
        function updateWheelSizeOptions(isMetric) {
            const wheelSizeSelect = document.getElementById('wheelSize');
            const currentValue = wheelSizeSelect.value;
            
            if (isMetric) {
                wheelSizeSelect.innerHTML = `
                    <option value="2.1">700c Road (2.1m)</option>
                    <option value="2.0">26" MTB (2.0m)</option>
                    <option value="2.15">27.5" MTB (2.15m)</option>
                    <option value="2.3">29" MTB (2.3m)</option>
                    <option value="custom">Custom</option>
                `;
            } else {
                wheelSizeSelect.innerHTML = `
                    <option value="2.1">700c Road (6.9ft)</option>
                    <option value="2.0">26" MTB (6.6ft)</option>
                    <option value="2.15">27.5" MTB (7.1ft)</option>
                    <option value="2.3">29" MTB (7.5ft)</option>
                    <option value="custom">Custom</option>
                `;
            }
            
            // Restore the selected value if it wasn't custom
            if (currentValue !== 'custom') {
                wheelSizeSelect.value = currentValue;
            } else {
                wheelSizeSelect.value = 'custom';
                updateWheelCircumference();
            }
        }

        // Handle calculation mode changes
        function handleModeChange() {
            const selectedMode = document.querySelector('input[name="calcMode"]:checked').value;
            calculationMode = selectedMode;
            
            const cadenceInputGroup = document.getElementById('cadenceInputGroup');
            
            if (selectedMode === 'power-first') {
                // Hide cadence input in power-first mode
                cadenceInputGroup.style.display = 'none';
            } else {
                // Show cadence input in gear-first mode
                cadenceInputGroup.style.display = 'flex';
            }
            
            debouncedCalculate();
        }

        // Theme management
        function toggleTheme() {
            const body = document.body;
            const themeText = document.getElementById('themeToggleText');
            
            if (body.hasAttribute('data-theme')) {
                body.removeAttribute('data-theme');
                themeText.innerHTML = '🌙 Dark Mode';
            } else {
                body.setAttribute('data-theme', 'dark');
                themeText.innerHTML = '☀️ Light Mode';
            }
        }

        // Hamburger menu management
        function toggleHamburgerMenu() {
            const hamburgerBtn = document.getElementById('hamburgerBtn');
            const dropdown = document.getElementById('hamburgerDropdown');
            
            hamburgerBtn.classList.toggle('active');
            dropdown.classList.toggle('show');
        }

        // Close hamburger menu when clicking outside
        document.addEventListener('click', function(event) {
            const hamburgerMenu = document.querySelector('.hamburger-menu');
            const dropdown = document.getElementById('hamburgerDropdown');
            const hamburgerBtn = document.getElementById('hamburgerBtn');
            
            if (!hamburgerMenu.contains(event.target)) {
                dropdown.classList.remove('show');
                hamburgerBtn.classList.remove('active');
            }
        });

        // Close hamburger menu when clicking on menu items (except theme toggle and unit system)
        document.addEventListener('click', function(event) {
            if (event.target.classList.contains('dropdown-item') && 
                !event.target.classList.contains('theme-toggle-dropdown') &&
                !event.target.classList.contains('unit-system-dropdown')) {
                const dropdown = document.getElementById('hamburgerDropdown');
                const hamburgerBtn = document.getElementById('hamburgerBtn');
                
                setTimeout(() => {
                    dropdown.classList.remove('show');
                    hamburgerBtn.classList.remove('active');
                }, 150);
            }
        });

        // Info dropdown management
        function toggleInfoDropdown(dropdownId) {
            const dropdown = document.getElementById(dropdownId + 'Dropdown');
            const arrow = document.getElementById(dropdownId + 'Arrow');
            const button = arrow.closest('.info-button');
            
            // Close all other dropdowns first
            const allDropdowns = document.querySelectorAll('.info-dropdown');
            const allArrows = document.querySelectorAll('.dropdown-arrow');
            const allButtons = document.querySelectorAll('.info-button');
            
            allDropdowns.forEach(dd => {
                if (dd !== dropdown) {
                    dd.classList.remove('show');
                }
            });
            
            allArrows.forEach(arr => {
                if (arr !== arrow) {
                    arr.classList.remove('rotated');
                }
            });
            
            allButtons.forEach(btn => {
                if (btn !== button) {
                    btn.classList.remove('active');
                }
            });
            
            // Toggle current dropdown
            dropdown.classList.toggle('show');
            arrow.classList.toggle('rotated');
            button.classList.toggle('active');
        }

        // Handle wheel size selection
        function updateWheelCircumference() {
            const wheelSize = document.getElementById('wheelSize');
            const customGroup = document.getElementById('customWheelGroup');
            const circumferenceInput = document.getElementById('wheelCircumference');
            
            if (wheelSize.value === 'custom') {
                customGroup.style.display = 'flex';
            } else {
                customGroup.style.display = 'none';
                circumferenceInput.value = wheelSize.value;
            }
            debouncedCalculate();
        }

        // Handle parameter selection (2 of 3)
        function handleParameterChange(paramType) {
            const checkbox = document.getElementById(paramType + 'Check');
            const input = document.getElementById(paramType === 'elevation' ? 'elevation' : paramType);
            
            if (checkbox.checked) {
                // Adding a parameter
                if (selectedParams.length >= 2) {
                    // Remove the oldest parameter
                    const oldestParam = selectedParams.shift();
                    const oldCheckbox = document.getElementById(oldestParam + 'Check');
                    const oldInput = document.getElementById(oldestParam === 'elevation' ? 'elevation' : oldestParam);
                    
                    oldCheckbox.checked = false;
                    oldInput.classList.add('disabled');
                }
                selectedParams.push(paramType);
                input.classList.remove('disabled');
            } else {
                // Removing a parameter
                const index = selectedParams.indexOf(paramType);
                if (index > -1) {
                    selectedParams.splice(index, 1);
                }
                input.classList.add('disabled');
            }
            debouncedCalculate();
        }

        // Debounced calculation
        function debouncedCalculate() {
            clearTimeout(calculateTimeout);
            
            // Show calculating state
            const results = document.getElementById('results');
            if (results.classList.contains('show')) {
                results.classList.add('calculating');
            }
            
            calculateTimeout = setTimeout(() => {
                calculate();
                results.classList.remove('calculating');
            }, 300);
        }

        // Input validation
        function validateInputs() {
            let isValid = true;
            
            // Define validation ranges based on unit system
            const ranges = isMetric ? {
                power: { min: 50, max: 1000 },
                riderWeight: { min: 30, max: 150 },
                equipmentWeight: { min: 5, max: 30 },
                chainring: { min: 20, max: 60 },
                cog: { min: 8, max: 50 },
                wheelCircumference: { min: 1.5, max: 3.0 },
                distance: { min: 0.1, max: 100 },
                elevation: { min: 10, max: 5000 }
            } : {
                power: { min: 50, max: 1000 },
                riderWeight: { min: 66, max: 330 }, // ~30-150kg in lbs
                equipmentWeight: { min: 11, max: 66 }, // ~5-30kg in lbs
                chainring: { min: 20, max: 60 },
                cog: { min: 8, max: 50 },
                wheelCircumference: { min: 4.9, max: 9.8 }, // ~1.5-3.0m in feet
                distance: { min: 0.1, max: 62 }, // ~100km in miles
                elevation: { min: 30, max: 16400 } // ~10-5000m in feet
            };
            
            const inputs = [
                { id: 'power', ...ranges.power },
                { id: 'riderWeight', ...ranges.riderWeight },
                { id: 'equipmentWeight', ...ranges.equipmentWeight },
                { id: 'chainring', ...ranges.chainring },
                { id: 'cog', ...ranges.cog },
                { id: 'wheelCircumference', ...ranges.wheelCircumference }
            ];

            // Add cadence validation only in gear-first mode
            if (calculationMode === 'gear-first') {
                inputs.push({ id: 'cadence', min: 40, max: 120 });
            }

            inputs.forEach(input => {
                const element = document.getElementById(input.id);
                if (element) {
                    const group = element.closest('.input-group');
                    const value = parseFloat(element.value);
                    
                    if (isNaN(value) || value < input.min || value > input.max) {
                        if (group) group.classList.add('error');
                        
                        // Update circumference error message based on current unit system
                        if (input.id === 'wheelCircumference') {
                            const circumferenceError = document.getElementById('circumferenceError');
                            if (circumferenceError) {
                                if (isMetric) {
                                    circumferenceError.textContent = 'Circumference must be between 1.5-3.0 meters';
                                } else {
                                    circumferenceError.textContent = 'Circumference must be between 4.9-9.8 feet';
                                }
                            }
                        }
                        
                        isValid = false;
                    } else {
                        if (group) group.classList.remove('error');
                    }
                }
            });

            return isValid && selectedParams.length === 2;
        }

        // Main calculation function
        function calculate() {
            if (!validateInputs()) {
                return;
            }

            try {
                // Get input values
                const power = parseFloat(document.getElementById('power').value);
                const riderWeight = parseFloat(document.getElementById('riderWeight').value);
                const equipmentWeight = parseFloat(document.getElementById('equipmentWeight').value);
                const chainring = parseInt(document.getElementById('chainring').value);
                const cog = parseInt(document.getElementById('cog').value);
                
                // Get wheel circumference (always convert to meters for calculations)
                const wheelSize = document.getElementById('wheelSize').value;
                let wheelCircumference;
                if (wheelSize === 'custom') {
                    const customValue = parseFloat(document.getElementById('wheelCircumference').value);
                    wheelCircumference = isMetric ? customValue : conversions.feetToMeters(customValue);
                } else {
                    wheelCircumference = parseFloat(wheelSize); // Preset values are always in meters
                }
                
                // Convert weights to kg if necessary and combine them
                const riderWeightKg = isMetric ? riderWeight : conversions.lbsToKg(riderWeight);
                const equipmentWeightKg = isMetric ? equipmentWeight : conversions.lbsToKg(equipmentWeight);
                const totalWeightKg = riderWeightKg + equipmentWeightKg;
                
                // Update system weight in results
                if (isMetric) {
                    updateResultWithAnimation('systemWeight', `${totalWeightKg.toFixed(1)} kg`);
                } else {
                    const totalWeightLbs = conversions.kgToLbs(totalWeightKg);
                    updateResultWithAnimation('systemWeight', `${totalWeightLbs.toFixed(0)} lbs`);
                }
                
                // Get climb parameters
                const distanceInput = document.getElementById('distance');
                const elevationInput = document.getElementById('elevation');
                const gradeInput = document.getElementById('grade');
                
                let distanceKm, distanceM, elevation, grade;
                let calculatedParam = '';
                
                // Determine which parameter to calculate
                if (!selectedParams.includes('distance')) {
                    // Calculate distance
                    elevation = parseFloat(elevationInput.value);
                    grade = parseFloat(gradeInput.value);
                    
                    // Convert elevation to meters if in imperial for calculation
                    const elevationM = isMetric ? elevation : conversions.feetToMeters(elevation);
                    distanceM = elevationM / (grade / 100);
                    distanceKm = distanceM / 1000;
                    
                    // Display with correct units
                    if (isMetric) {
                        calculatedParam = `Distance: ${distanceKm.toFixed(1)} km`;
                    } else {
                        const distanceMiles = conversions.kmToMiles(distanceKm);
                        calculatedParam = `Distance: ${distanceMiles.toFixed(1)} mi`;
                    }
                } else if (!selectedParams.includes('elevation')) {
                    // Calculate elevation
                    distanceKm = parseFloat(distanceInput.value);
                    
                    // Convert distance to km if in imperial for calculation
                    if (!isMetric) {
                        distanceKm = conversions.milesToKm(distanceKm);
                    }
                    
                    distanceM = distanceKm * 1000;
                    grade = parseFloat(gradeInput.value);
                    elevation = distanceM * (grade / 100);
                    
                    // Display with correct units
                    if (isMetric) {
                        calculatedParam = `Elevation Gain: ${elevation.toFixed(0)} m`;
                    } else {
                        const elevationFeet = conversions.metersToFeet(elevation);
                        calculatedParam = `Elevation Gain: ${elevationFeet.toFixed(0)} ft`;
                    }
                } else {
                    // Calculate grade
                    distanceKm = parseFloat(distanceInput.value);
                    elevation = parseFloat(elevationInput.value);
                    
                    // Convert to metric for calculation if needed
                    if (!isMetric) {
                        distanceKm = conversions.milesToKm(distanceKm);
                        elevation = conversions.feetToMeters(elevation);
                    }
                    
                    distanceM = distanceKm * 1000;
                    grade = (elevation / distanceM) * 100;
                    calculatedParam = `Average Grade: ${grade.toFixed(1)}%`;
                }

                // Calculate gear ratio
                const gearRatio = chainring / cog;
                
                // Update gear ratio display (in input section)
                document.getElementById('gearRatioDisplay').textContent = gearRatio.toFixed(2);
                const efficiency = 0.95; // 95% drivetrain efficiency
                const availablePower = power * efficiency;
                
                let climbingVelocityMs, climbingVelocityKmh, cadence, timeSeconds;
                let gravitationalPower, rollingResistance, aerodynamicPower, totalResistancePower;
                
                if (calculationMode === 'gear-first') {
                    // Original gear-first calculation
                    cadence = parseFloat(document.getElementById('cadence').value);
                    
                    // Calculate speed from cadence, gearing, and wheel circumference
                    const wheelRpm = cadence * gearRatio;
                    const speedMs = (wheelRpm * wheelCircumference) / 60;
                    
                    // Calculate power requirements at this speed
                    const gradeRadians = Math.atan(grade / 100);
                    gravitationalPower = totalWeightKg * 9.81 * Math.sin(gradeRadians) * speedMs;
                    rollingResistance = totalWeightKg * 9.81 * Math.cos(gradeRadians) * 0.005 * speedMs;
                    aerodynamicPower = 0.5 * 1.2 * 0.3 * Math.pow(speedMs, 3);
                    totalResistancePower = gravitationalPower + rollingResistance + aerodynamicPower;
                    
                    // Adjust speed based on power requirements
                    if (totalResistancePower <= availablePower) {
                        climbingVelocityMs = speedMs;
                    } else {
                        // Reduce speed proportionally if not enough power
                        const powerRatio = availablePower / totalResistancePower;
                        climbingVelocityMs = speedMs * Math.sqrt(powerRatio);
                        
                        // Recalculate power components at the adjusted speed
                        gravitationalPower = totalWeightKg * 9.81 * Math.sin(gradeRadians) * climbingVelocityMs;
                        rollingResistance = totalWeightKg * 9.81 * Math.cos(gradeRadians) * 0.005 * climbingVelocityMs;
                        aerodynamicPower = 0.5 * 1.2 * 0.3 * Math.pow(climbingVelocityMs, 3);
                        totalResistancePower = gravitationalPower + rollingResistance + aerodynamicPower;
                    }
                    
                } else {
                    // Power-first calculation: find optimal speed where available power = required power
                    const gradeRadians = Math.atan(grade / 100);
                    
                    // Use iterative method to find optimal speed
                    climbingVelocityMs = findOptimalSpeed(availablePower, totalWeightKg, gradeRadians);
                    
                    // Calculate power components at optimal speed
                    gravitationalPower = totalWeightKg * 9.81 * Math.sin(gradeRadians) * climbingVelocityMs;
                    rollingResistance = totalWeightKg * 9.81 * Math.cos(gradeRadians) * 0.005 * climbingVelocityMs;
                    aerodynamicPower = 0.5 * 1.2 * 0.3 * Math.pow(climbingVelocityMs, 3);
                    totalResistancePower = gravitationalPower + rollingResistance + aerodynamicPower;
                    
                    // Calculate optimal cadence for this speed
                    const wheelRpm = (climbingVelocityMs * 60) / wheelCircumference;
                    cadence = wheelRpm / gearRatio;
                }
                
                // Ensure minimum realistic speed
                climbingVelocityMs = Math.max(climbingVelocityMs, 1.4); // Minimum 5 km/h
                climbingVelocityKmh = climbingVelocityMs * 3.6;
                
                // Calculate climb time
                timeSeconds = distanceM / climbingVelocityMs;
                const hours = Math.floor(timeSeconds / 3600);
                const minutes = Math.floor((timeSeconds % 3600) / 60);
                const seconds = Math.floor(timeSeconds % 60);
                const timeFormatted = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
                
                // Update basic results
                updateResultWithAnimation('calculatedParam', calculatedParam);
                
                // Display velocity with correct units
                if (isMetric) {
                    updateResultWithAnimation('velocity', `${climbingVelocityKmh.toFixed(1)} km/h`);
                } else {
                    const climbingVelocityMph = conversions.kmToMiles(climbingVelocityKmh);
                    updateResultWithAnimation('velocity', `${climbingVelocityMph.toFixed(1)} mph`);
                }
                
                updateResultWithAnimation('climbTime', timeFormatted);
                
                // Update cadence display based on calculation mode
                const cadenceLabel = document.getElementById('cadenceLabel');
                if (calculationMode === 'power-first') {
                    cadenceLabel.textContent = 'Required Cadence:';
                    updateResultWithAnimation('cadenceValue', `${cadence.toFixed(0)} RPM`);
                } else {
                    cadenceLabel.textContent = 'Selected Cadence:';
                    const inputCadence = parseFloat(document.getElementById('cadence').value);
                    updateResultWithAnimation('cadenceValue', `${inputCadence.toFixed(0)} RPM`);
                }
                
                // Update power analysis
                updateResultWithAnimation('availablePower', `${availablePower.toFixed(0)}W`);
                updateResultWithAnimation('requiredPower', `${totalResistancePower.toFixed(0)}W`);
                
                // Power balance with color coding
                const powerDifference = availablePower - totalResistancePower;
                const balanceElement = document.getElementById('powerBalance');
                const balanceValue = document.getElementById('powerBalanceValue');
                
                if (balanceElement && balanceValue) {
                    // Remove existing classes
                    balanceElement.classList.remove('power-surplus', 'power-deficit');
                    
                    if (powerDifference >= 0) {
                        balanceValue.textContent = `+${powerDifference.toFixed(0)}W surplus`;
                        balanceElement.classList.add('power-surplus');
                    } else {
                        balanceValue.textContent = `${powerDifference.toFixed(0)}W deficit`;
                        balanceElement.classList.add('power-deficit');
                    }
                }
                
                // Update power breakdown
                updateResultWithAnimation('gravityPower', `${gravitationalPower.toFixed(0)}W`);
                updateResultWithAnimation('rollingPower', `${rollingResistance.toFixed(0)}W`);
                updateResultWithAnimation('aeroPower', `${aerodynamicPower.toFixed(0)}W`);
                
                // Update power bar
                const powerBar = document.getElementById('powerBar');
                const powerBarLabel = document.getElementById('powerBarLabel');
                if (powerBar && powerBarLabel) {
                    const powerUsagePercent = Math.min((totalResistancePower / availablePower) * 100, 100);
                    
                    powerBar.style.width = `${powerUsagePercent}%`;
                    powerBar.className = powerDifference >= 0 ? 'power-bar sufficient' : 'power-bar insufficient';
                    powerBarLabel.textContent = `${powerUsagePercent.toFixed(0)}% Power Usage`;
                }
                
                // Update explanation text with current power value
                const explanationPower = document.getElementById('explanationPower');
                if (explanationPower) {
                    explanationPower.textContent = `${power}W`;
                }
                
                // Show results
                document.getElementById('results').classList.add('show');
                
            } catch (error) {
                console.error('Calculation error:', error);
            }
        }

        // Function to find optimal speed using iterative method
        function findOptimalSpeed(availablePower, totalWeightKg, gradeRadians) {
            let speed = 3.0; // Start with 3 m/s (~11 km/h)
            let iterations = 0;
            const maxIterations = 50;
            const tolerance = 0.1; // 0.1W tolerance
            
            while (iterations < maxIterations) {
                // Calculate required power at current speed
                const gravitationalPower = totalWeightKg * 9.81 * Math.sin(gradeRadians) * speed;
                const rollingResistance = totalWeightKg * 9.81 * Math.cos(gradeRadians) * 0.005 * speed;
                const aerodynamicPower = 0.5 * 1.2 * 0.3 * Math.pow(speed, 3);
                const totalRequired = gravitationalPower + rollingResistance + aerodynamicPower;
                
                const powerDifference = availablePower - totalRequired;
                
                // Check if we're close enough
                if (Math.abs(powerDifference) < tolerance) {
                    break;
                }
                
                // Adjust speed based on power difference
                if (powerDifference > 0) {
                    // We can go faster
                    speed += 0.1;
                } else {
                    // We need to go slower
                    speed -= 0.1;
                }
                
                // Ensure speed stays positive and reasonable
                speed = Math.max(0.5, Math.min(speed, 20)); // Between 0.5 and 20 m/s
                
                iterations++;
            }
            
            return speed;
        }

        // Helper function to update results with animation
        function updateResultWithAnimation(elementId, newValue) {
            const element = document.getElementById(elementId);
            const resultItem = element ? element.closest('.result-item') : null;
            
            if (element && element.textContent !== newValue) {
                element.textContent = newValue;
                if (resultItem) {
                    resultItem.classList.add('updated');
                    setTimeout(() => resultItem.classList.remove('updated'), 600);
                }
            }
        }

        // Initialize on page load
        document.addEventListener('DOMContentLoaded', function() {
            // Set initial disabled state
            document.getElementById('grade').classList.add('disabled');
            
            // Initialize unit system properly
            isMetric = true;
            updateWheelSizeOptions(true); // Start with metric
            
            // Add real-time calculation to all inputs
            const inputs = document.querySelectorAll('input[type="number"]');
            inputs.forEach(input => {
                input.addEventListener('input', debouncedCalculate);
            });

            // Add listener to wheel size dropdown
            document.getElementById('wheelSize').addEventListener('change', updateWheelCircumference);
            
            // Add listeners to mode toggle radio buttons
            const modeRadios = document.querySelectorAll('input[name="calcMode"]');
            modeRadios.forEach(radio => {
                radio.addEventListener('change', handleModeChange);
            });
            
            // Initial calculation
            debouncedCalculate();
        });
    </script>
</body>
</html>
